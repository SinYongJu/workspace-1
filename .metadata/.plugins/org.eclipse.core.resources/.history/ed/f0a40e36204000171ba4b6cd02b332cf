/* 멀티태스킹 : 스레드의 우선순위
 * => 자바는 스레드의 우선순위를 10단계로 나눠 관리한다.
 * 1~ 10 까지 지정한다.
 * => 기본은 "main" 스레드의 기본 우선 순위는 5이다.
 * => "main" 스레드에서 새 스레드를 만들면,
 *  그 스레드는 "main"의 자식 스레드가 된다.
 *  자식 스레드는 부모 스레드의 우선 순위와 동일한 값을 갖는다.
 * => 그런데,
 *  사실상 자바의 우선 순위는 실행에 별 영향을 끼치지 못한다.
 * 왜?>
 *  스레드를 관리하는 것이 OS이기 때문이다.
 *  따라서 OS가 스레드를 관리하는 방식(스케줄링 방식)에 따라
 *  실행이 결정되기 때문이다.
 * => 자바는 1~10 까지 우선순위가 있지만, 
 *  그 자바를 실행하는 OS는 그 종류에 따라 단계가 다르다.
 *  예를 들면, Windows(7단계), Solaris(65535단계) 등
 *  이렇게 OS와 자바 사이에 단계가 일치하지 않기 때문에 
 *  어차피 자바의 우선순위를 정밀할게 조정할 수 없다.
 * => 결론
 *  우선순위를 고려하여 프로그래밍을 하지 말라!
 *  
 **/
package step19;

public class Test05_1 {
  public class Account{
    long balance;
    
    public Account(long balance){
      this.balance = balance;
    }
    
    public long withdraw(long money){
      long temp = this.balance;
      double x = 3.141592;
      int delayCount = (int)(Math.random() * 1000);
      
      for(int i = 0; i < delayCount; i++){
        x /= 345.2345;
      }  
      temp -= money;
      
      if(temp >= 0){
        this.balance = temp;
        return money;
      }
      return 0;          
    }
  }
  
  static class ATM extends Thread {
    Account account;
    
    public ATM(String name, Account account){
      super(name);
      this.account = account;
    }
    
    public void run(){
      long sum = 0;
      for(int i = 0; i< 10000; i++){
        long money = this.account.withdraw(100);
        if(money==0)
          return;
        sum += money;
      }
      System.out.printf("%s = %d\n",this.getName(), sum);
    }
  }
 
  public static void main(String[] args) {
    Account account = new Account(1000000);
    ATM t1 = new ATM("강남",account);
    ATM t2 = new ATM("강북",account);
    ATM t3 = new ATM("강원",account);
    ATM t4 = new ATM("제주",account);
    
    t1.start();
    t2.start();
    t3.start();
    t4.start();
  }
}
