/* 소켓 프로그래밍 : HTTP 클라이언트 만들기
 * */
package step18;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.net.Socket;
import java.util.Scanner;

public class Test05_1 {
  public static void main(String[] args) throws Exception {
    if(args.length < 1){
      System.out.println("[사용법] > java -cp bin step18.Test04_2 서버주소 포트번호 파일명");
      return;
    }
    
    // URL에서 host 주소와 포트 번호, 자원경로를 분리한다.
    // 예) http://www.google.com:80/test.html
    // => host: www.google.com
    // => port: 80
    // => path: /test.html
    String url = args[0].replace("http://", "");
    String host = null;
    int port = 80;
    int colonIndex = url.indexOf(":");
    int firstSlashIndex = url.indexOf("/");
    String path = url.substring(firstSlashIndex);
    
    if(colonIndex >= 0){
      host = url.substring(0, colonIndex);
      port = Integer.parseInt(url.substring(colonIndex+1, firstSlashIndex));
    } else{
      host = url.substring(0, firstSlashIndex);
    }

  
    // 프로그램 아규먼트로 넘어온 값을 가지고 파일을 읽을 ㅈ ㅜㄴ비를 한다.
    try(
    Socket socket = new Socket(host, Integer.parseInt(args[1]));
    BufferedInputStream in = new BufferedInputStream(socket.getInputStream());
    PrintStream out = new PrintStream(new BufferedOutputStream(socket.getOutputStream()));){    
     
      // HTTP 서버에게 요청 데이터를 보낸다.
      //1) request line - 예) GET
      out.writeUTF(file.getName());
      
      //2) 파일크기 보내기
      out.writeLong(file.length());
      
      //3)파일보내기
      for(int i = 0; i < file.length(); i++){
        out.write(fileIn.read());
      }
      out.flush();
   
      System.out.println(in.nextLine());
    } catch (Exception e){
      e.printStackTrace();
    }*/
  }
}
