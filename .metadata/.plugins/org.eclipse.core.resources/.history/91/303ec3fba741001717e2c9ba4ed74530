/* 소켓 프로그래밍 : 채팅 서버 만들기 - v1 
 * =>
 * */
package step18;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.ServerSocket;
import java.net.Socket;

import com.google.gson.Gson;


public class Test08_1 {
  
  class ChatJob implements Runnable {
    Socket socket;
    
    public ChatJob(Socket socket){
      this.socket = socket;
      System.out.println("connect client");
    }
    
    public void run(){
      int count = 0;
      try(
          Socket socket= this.socket;
//        InputStream in = socket.getInputStream();
          BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
//        OutputStream out = socket.getOutputStream();
          PrintStream out =  new PrintStream(socket.getOutputStream());
          ) {
        // 연결되어 있는 동안 계속 클라이언트와 통신하기
        while(true){
          String json = in.readLine();
          if(json == null)
            break;
          System.out.println(json);
          
          // Gson 객체를 이용해 JSON 문자열을 Value 객체로 만든다.
          // => Gson 라이브러리 추가
          //  1) build.gradle 에 repositories {}, dependencies {} 블록추가
          //  2) 명령창에서 "gradle eclipse"를 실행하여 이클립스 설정 파일 갱신
          //  3) 이클립스에서 프로젝트 "reflesh" 할 것.
          Gson gson = new Gson();
          Value value = gson.fromJson(json, Value.class);
          
          float result = 0f;
          switch(value.op){
          case "+": result = (float) value.v1 + value.v2; break;
          case "-": result = (float) value.v1 - value.v2; break;
          case "*": result = (float) value.v1 * value.v2; break;
          case "/": result = (float) value.v1 / value.v2; break;
          case "%": result = (float) value.v1 % value.v2; break;
          
          }
          if(++count > 5 ){
            out.println("무료 사용 끝!");
          } else {
            out.println(result);
          }
          out.flush();
        }
        System.out.println("=>클라이언트와 연결 끊기");
      } catch (Exception e){
        e.printStackTrace();
      }
    }
  }
  
  public void listen(int port) throws Exception{
    ServerSocket serverSocket = new ServerSocket(port);
    System.out.println("서버 실행 중........ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ");

    while(true){
      new Thread(new CalculatorJob(serverSocket.accept())).start();
    }
  }

  public static void main(String[] args) throws Exception {
    Test08_1 server = new Test08_1();
    server.listen(8888);
  }
}
