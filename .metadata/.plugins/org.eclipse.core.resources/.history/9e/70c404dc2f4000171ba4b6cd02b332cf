/* 멀티태스킹 : 스레드 라이프 사이클
 * => 생명주기
 *             start()             sleep(),wait()
 * new Thread() ----> Runnable 상태 ----> Not Runnable 상태
 *                           |      <----
 *                           |  timeout, nofify()
 *                           |실행완료
 *                         dead
 **/
package step19;

public class Test06 {
 
  static class Account extends Thread{
    long balance;
    
    public Account(long balance){
      this.balance = balance;
    }
    
    // 여러 ATM 스레드가 이 메서드를 호출한다.
    // 이 메서드 안에서는 인스턴스의 변수 값을 변경한다.
    // 문제는 여러 스레드들이 같은 인스턴스에 대해 wirhdraw() 메서드를 호출했을 때
    // 서로 중복하여 값을 변경할 수 있다는 것이다.
    // 이렇게 되면 올바른 값이 저장되지 않는다.
    // 이렇게 여러 스레드가 동시에 접근해서 실행했을 때
    // 문제가 발생하는 코드 블록을 "Critical Section"이라 부른다.
    public long withdraw(long money){
      long temp = this.balance;
     
      temp -= money;
      
      if(temp >= 0){
        this.balance = temp;
        return money;
      }
      return 0;          
    }
  }

  public static class ATM extends Thread {
    Account account;
    
    public ATM(String name, Account account){
      super(name);
      this.account = account;
    }
    
    public void run(){
      long sum = 0;
      for(int i = 0; i< 10000; i++){
        long money = this.account.withdraw(100);
        if(money==0)
          break;
        sum += money;
      }
      System.out.printf("%s = %d\n",this.getName(), sum);
    }
  }
  
  public static void main(String[] args) {
    Account account = new Account(1000000);
    ATM t1 = new ATM("강남",account);
    ATM t2 = new ATM("강북",account);
    ATM t3 = new ATM("강원",account);
    ATM t4 = new ATM("제주",account);
    
    t1.start();
    t2.start();
    t3.start();
    t4.start();
  }
}
