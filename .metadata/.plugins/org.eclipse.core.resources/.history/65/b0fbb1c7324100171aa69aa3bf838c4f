package homework;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.ServerSocket;
import java.net.Socket;

import com.google.gson.Gson;


public class server {
  class Value{
    int v1;
    int v2;
    String op;
  }
  class CalculatorJob implements Runnable {
    Socket socket;
    
    public CalculatorJob(Socket socket){
      this.socket = socket;
      System.out.print("connect client");
    }
    
    public void run(){
      int count = 0;
      try(
          Socket socket= this.socket;
//        InputStream in = socket.getInputStream();
          BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
//        OutputStream out = socket.getOutputStream();
          PrintStream out =  new PrintStream(socket.getOutputStream());
          ) {
        // 연결되어 있는 동안 계속 클라이언트와 통신하기
        while(true){
          String json = in.readLine();
          if(json == null)
            break;
          System.out.println(json);
          
          Gson gson = new Gson();
          Value value = gson.fromJson(json, Value.class);
          
          float result = 0f;
          switch(value.op){
          case "+": result = (float) value.v1 + value.v2; break;
          case "-": result = (float) value.v1 - value.v2; break;
          case "*": result = (float) value.v1 * value.v2; break;
          case "/": result = (float) value.v1 / value.v2; break;
          case "%": result = (float) value.v1 % value.v2; break;
          
          }
          if(++count > 5 ){
            out.println("무료 사용 끝!");
          } else {
            out.println(result);
          }
          out.flush();
        }
        System.out.println("=>클라이언트와 연결 끊기");
      } catch (Exception e){
        e.printStackTrace();
      }
    }
  }
  
  public void listen(int port) throws Exception{
    ServerSocket serverSocket = new ServerSocket(port);
    System.out.println("서버 실행 중........ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ");

    while(true){
      new Thread(new CalculatorJob(serverSocket.accept())).start();
    }
  }

  public static void main(String[] args) throws Exception {
    server chatserver = new server();
    chatserver.listen(8888);
  }
}
